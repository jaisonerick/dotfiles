if &compatible
  set nocompatible
end

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'christoomey/vim-run-interactive'

" If fzf has already been installed via Homebrew, use the existing fzf
" Otherwise, install fzf. The `--all` flag makes fzf accessible outside of vim
if isdirectory("/usr/local/opt/fzf")
  Plug '/usr/local/opt/fzf'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif

Plug 'junegunn/fzf.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'fatih/vim-go'
Plug 'janko-m/vim-test'
Plug 'pangloss/vim-javascript'
Plug 'pbrisbin/vim-mkdir'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/tComment'
Plug 'wincent/Command-T'               " Quick search project files
Plug 'scrooloose/syntastic'            " Syntax Check plugin
Plug 'tpope/vim-unimpaired'            " pairs of handy bracket mappings

if g:has_async
  Plug 'dense-analysis/ale'
endif

" My Bundles
Plug 'altercation/vim-colors-solarized' " Enable Solarized colorscheme
Plug 'christoomey/vim-tmux-navigator'   " Seamless navigation between tmux and vim
Plug 'mattn/emmet-vim'                  " Expading abbreviations with Emmet
Plug 'scrooloose/nerdtree'              " File navigation panel on Vim
Plug 'honza/vim-snippets'               " Ultisnips snippets
Plug 'SirVer/ultisnips'                 " Snippets for vim with python support
Plug 'sickill/vim-pasta'                " Pasting with context indentation
Plug 'christoomey/vim-tmux-runner'      " Run from vim on Tmux panel
Plug 'vim-scripts/BufOnly.vim'          " Close all buffers but the current
Plug 'pangloss/vim-javascript'          " Improves javascrip on VIM (required by react)
Plug 'mxw/vim-jsx'                      " Syntax Highlight with React JSX
Plug 'kylef/apiblueprint.vim'           " Api Blueprint
Plug 'majutsushi/tagbar'                " Vim plugin that displays tags in a window, ordered by scope

" Ruby Bundles
Plug 'vim-ruby/vim-ruby'              " Ruby support on vim
Plug 'kana/vim-textobj-user'          " Create your own text objects (used by vim-textobj-rubyblock)
Plug 'nelstrom/vim-textobj-rubyblock' " Ruby text objects
Plug 'tpope/vim-rails'                " Rails support for vim
Plug 'thoughtbot/vim-rspec'           " Run RSpecs from vim
Plug 'tpope/vim-bundler'              " Support for bundler inside vim
Plug 'tpope/vim-endwise'              " Auto add end on class, module, def, etc.

Plug 'justinj/vim-react-snippets'     " React snippets

" Go Bundles
Plug 'fatih/vim-go'   " Go development plugin for Vim
Plug 'gevans/vim-ginkgo' " Ginkgo syntax highlight

" PHP Bundles
" Plug 'arnaud-lb/vim-php-namespace'
" Plug 'tobyS/vmustache' " Dependency of tobyS/pdv
" Plug 'tobyS/pdv'

" Unused Bundles
" Plug 'Lokaltog/vim-easymotion'
" Plug 'rizzatti/dash.vim'

" Setup powerline to vim
python import sys; sys.path.append("/usr/local/lib/python2.7/site-packages/")
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()
