if &compatible
  set nocompatible
end

" Remove declared plugins - https://github.com/thoughtbot/dotfiles/commit/3bbab420bce4d7e3f00df0e60466609a5f77e0f6
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

" Initialize Vim Plug (https://github.com/junegunn/vim-plug)
call plug#begin('~/.vim/bundle')
"
" == VIM Overall Plugins ==
"
" If fzf has already been installed via Homebrew, use the existing fzf
" Otherwise, install fzf. The `--all` flag makes fzf accessible outside of vim
if isdirectory("/usr/local/opt/fzf")
  Plug '/usr/local/opt/fzf'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif
" Plug 'junegunn/fzf.vim'
Plug 'yuki-yano/fzf-preview.vim', { 'branch': 'release/rpc' }


Plug 'morhetz/gruvbox'                    " Enable Gruvbox colorscheme
Plug 'christoomey/vim-tmux-navigator'     " Seamless navigation between tmux and vim
Plug 'christoomey/vim-tmux-runner'        " Run from vim on Tmux panel
Plug 'vim-scripts/BufOnly.vim'            " Close all buffers but the current
Plug 'scrooloose/nerdtree'                " File navigation panel on Vim
Plug 'majutsushi/tagbar'                  " Vim plugin that displays tags in a window, ordered by scope
Plug 'sickill/vim-pasta'                  " Pasting with context indentation

Plug 'lbrayner/vim-rzip'                  " Supports Zip files (for Yarn PnP)

Plug 'pbrisbin/vim-mkdir'                 " Vim automatically creates the non-existent directory for you.
Plug 'tpope/vim-eunuch'                   " Vim sugar for the UNIX shell commands that need it the most.
Plug 'tpope/vim-repeat'                   " Allow '.' to repeat plugin commands (like surround, unimpaired, etc)
Plug 'tpope/vim-surround'                 " Provides mappings to easily delete, change and add surroundings ('', etc)
Plug 'tpope/vim-unimpaired'               " Pairs of handy bracket mappings
Plug 'vim-scripts/tComment'               " Toggle comment lines for multiple languages
Plug 'vim-test/vim-test'                  " A Vim wrapper for running tests on different granularities.
Plug 'tpope/vim-endwise'                  " Adds 'end' to certain languages (like ruby, vimscript, etc)
Plug 'tpope/vim-fugitive'                 " Calls any arbitrary Git command from within Vim
Plug 'tpope/vim-rhubarb'                  " Similar to Fugitive, but for Github

Plug 'honza/vim-snippets'                 " Vim snippets support

Plug 'christoomey/vim-system-copy'        " System copy and paste (cp and cv)

Plug 'neoclide/coc.nvim', {'branch': 'release'} " Autocomplete for Vim

" Ruby Bundles
Plug 'vim-ruby/vim-ruby'                  " Vim's runtime files for ruby support. This includes syntax highlighting,
                                          " indentation, omnicompletion, and various useful tools and mappings.
Plug 'tpope/vim-rails'                    " Massive Rails vim plugin to work with Vim projects
Plug 'tpope/vim-projectionist'            " Allows :A to automatically jump between Spec and Lib when building gems
Plug 'tpope/vim-rake'                     " Use togehter with the above
Plug 'tpope/vim-bundler'                  " This is a lightweight bag of Vim goodies for Bundler
Plug 'kana/vim-textobj-user'              " Create your own text objects (used by vim-textobj-rubyblock)
Plug 'nelstrom/vim-textobj-rubyblock'     " Ruby text objects

Plug 'christoomey/vim-run-interactive'    " A Vim plugin for selectively running commands via an interactive shell.
Plug 'slim-template/vim-slim'             " Slim Syntax Highlighting (https://github.com/slim-template/slim)

" HTML/Javascript Bundles
Plug 'mattn/emmet-vim'                    " Expading abbreviations with Emmet
Plug 'pangloss/vim-javascript'            " Syntax highlighting and improved indentation for javascript
Plug 'leafgarland/typescript-vim'         " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'           " JS and JSX syntax
Plug 'styled-components/vim-styled-components', { 'branch': 'main' } " Package for styled components
Plug 'jparise/vim-graphql'                " GraphQL syntax
Plug 'neoclide/jsonc.vim'                 " Support for JSONC

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()
